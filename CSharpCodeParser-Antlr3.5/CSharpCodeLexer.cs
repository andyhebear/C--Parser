//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5 CSharpCode.g 2013-06-30 23:01:32

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace  Gplusnasite.CSharpParser 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5")]
[System.CLSCompliant(false)]
public partial class CSharpCodeLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int COMMENT=4;
	public const int DEFAULT_VALUE=5;
	public const int ESC_SEQ=6;
	public const int HEX_DIGIT=7;
	public const int NAME=8;
	public const int SPACE=9;
	public const int STRING=10;
	public const int UNICODE_ESC=11;

	    public AccessType Accessor = AccessType.Private;


    // delegates
    // delegators

	public CSharpCodeLexer()
	{
		OnCreated();
	}

	public CSharpCodeLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public CSharpCodeLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "CSharpCode.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__12() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__12() {}

    // $ANTLR start "T__12"
    [GrammarRule("T__12")]
    private void mT__12()
    {
    	EnterRule_T__12();
    	EnterRule("T__12", 1);
    	TraceIn("T__12", 1);
    		try
    		{
    		int _type = T__12;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:12:7: ( '(' )
    		DebugEnterAlt(1);
    		// CSharpCode.g:12:9: '('
    		{
    		DebugLocation(12, 9);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__12", 1);
    		LeaveRule("T__12", 1);
    		LeaveRule_T__12();
        }
    }
    // $ANTLR end "T__12"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__13() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__13() {}

    // $ANTLR start "T__13"
    [GrammarRule("T__13")]
    private void mT__13()
    {
    	EnterRule_T__13();
    	EnterRule("T__13", 2);
    	TraceIn("T__13", 2);
    		try
    		{
    		int _type = T__13;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:13:7: ( ')' )
    		DebugEnterAlt(1);
    		// CSharpCode.g:13:9: ')'
    		{
    		DebugLocation(13, 9);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__13", 2);
    		LeaveRule("T__13", 2);
    		LeaveRule_T__13();
        }
    }
    // $ANTLR end "T__13"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__14() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__14() {}

    // $ANTLR start "T__14"
    [GrammarRule("T__14")]
    private void mT__14()
    {
    	EnterRule_T__14();
    	EnterRule("T__14", 3);
    	TraceIn("T__14", 3);
    		try
    		{
    		int _type = T__14;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:14:7: ( ',' )
    		DebugEnterAlt(1);
    		// CSharpCode.g:14:9: ','
    		{
    		DebugLocation(14, 9);
    		Match(','); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__14", 3);
    		LeaveRule("T__14", 3);
    		LeaveRule_T__14();
        }
    }
    // $ANTLR end "T__14"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__15() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__15() {}

    // $ANTLR start "T__15"
    [GrammarRule("T__15")]
    private void mT__15()
    {
    	EnterRule_T__15();
    	EnterRule("T__15", 4);
    	TraceIn("T__15", 4);
    		try
    		{
    		int _type = T__15;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:15:7: ( '.' )
    		DebugEnterAlt(1);
    		// CSharpCode.g:15:9: '.'
    		{
    		DebugLocation(15, 9);
    		Match('.'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__15", 4);
    		LeaveRule("T__15", 4);
    		LeaveRule_T__15();
        }
    }
    // $ANTLR end "T__15"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__16() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__16() {}

    // $ANTLR start "T__16"
    [GrammarRule("T__16")]
    private void mT__16()
    {
    	EnterRule_T__16();
    	EnterRule("T__16", 5);
    	TraceIn("T__16", 5);
    		try
    		{
    		int _type = T__16;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:16:7: ( ':' )
    		DebugEnterAlt(1);
    		// CSharpCode.g:16:9: ':'
    		{
    		DebugLocation(16, 9);
    		Match(':'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__16", 5);
    		LeaveRule("T__16", 5);
    		LeaveRule_T__16();
        }
    }
    // $ANTLR end "T__16"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__17() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__17() {}

    // $ANTLR start "T__17"
    [GrammarRule("T__17")]
    private void mT__17()
    {
    	EnterRule_T__17();
    	EnterRule("T__17", 6);
    	TraceIn("T__17", 6);
    		try
    		{
    		int _type = T__17;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:17:7: ( ';' )
    		DebugEnterAlt(1);
    		// CSharpCode.g:17:9: ';'
    		{
    		DebugLocation(17, 9);
    		Match(';'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__17", 6);
    		LeaveRule("T__17", 6);
    		LeaveRule_T__17();
        }
    }
    // $ANTLR end "T__17"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__18() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__18() {}

    // $ANTLR start "T__18"
    [GrammarRule("T__18")]
    private void mT__18()
    {
    	EnterRule_T__18();
    	EnterRule("T__18", 7);
    	TraceIn("T__18", 7);
    		try
    		{
    		int _type = T__18;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:18:7: ( '=' )
    		DebugEnterAlt(1);
    		// CSharpCode.g:18:9: '='
    		{
    		DebugLocation(18, 9);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__18", 7);
    		LeaveRule("T__18", 7);
    		LeaveRule_T__18();
        }
    }
    // $ANTLR end "T__18"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__19() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__19() {}

    // $ANTLR start "T__19"
    [GrammarRule("T__19")]
    private void mT__19()
    {
    	EnterRule_T__19();
    	EnterRule("T__19", 8);
    	TraceIn("T__19", 8);
    		try
    		{
    		int _type = T__19;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:19:7: ( 'class' )
    		DebugEnterAlt(1);
    		// CSharpCode.g:19:9: 'class'
    		{
    		DebugLocation(19, 9);
    		Match("class"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__19", 8);
    		LeaveRule("T__19", 8);
    		LeaveRule_T__19();
        }
    }
    // $ANTLR end "T__19"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__20() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__20() {}

    // $ANTLR start "T__20"
    [GrammarRule("T__20")]
    private void mT__20()
    {
    	EnterRule_T__20();
    	EnterRule("T__20", 9);
    	TraceIn("T__20", 9);
    		try
    		{
    		int _type = T__20;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:20:7: ( 'private' )
    		DebugEnterAlt(1);
    		// CSharpCode.g:20:9: 'private'
    		{
    		DebugLocation(20, 9);
    		Match("private"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__20", 9);
    		LeaveRule("T__20", 9);
    		LeaveRule_T__20();
        }
    }
    // $ANTLR end "T__20"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__21() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__21() {}

    // $ANTLR start "T__21"
    [GrammarRule("T__21")]
    private void mT__21()
    {
    	EnterRule_T__21();
    	EnterRule("T__21", 10);
    	TraceIn("T__21", 10);
    		try
    		{
    		int _type = T__21;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:21:7: ( 'protected' )
    		DebugEnterAlt(1);
    		// CSharpCode.g:21:9: 'protected'
    		{
    		DebugLocation(21, 9);
    		Match("protected"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__21", 10);
    		LeaveRule("T__21", 10);
    		LeaveRule_T__21();
        }
    }
    // $ANTLR end "T__21"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__22() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__22() {}

    // $ANTLR start "T__22"
    [GrammarRule("T__22")]
    private void mT__22()
    {
    	EnterRule_T__22();
    	EnterRule("T__22", 11);
    	TraceIn("T__22", 11);
    		try
    		{
    		int _type = T__22;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:22:7: ( 'public' )
    		DebugEnterAlt(1);
    		// CSharpCode.g:22:9: 'public'
    		{
    		DebugLocation(22, 9);
    		Match("public"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__22", 11);
    		LeaveRule("T__22", 11);
    		LeaveRule_T__22();
        }
    }
    // $ANTLR end "T__22"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__23() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__23() {}

    // $ANTLR start "T__23"
    [GrammarRule("T__23")]
    private void mT__23()
    {
    	EnterRule_T__23();
    	EnterRule("T__23", 12);
    	TraceIn("T__23", 12);
    		try
    		{
    		int _type = T__23;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:23:7: ( 'using' )
    		DebugEnterAlt(1);
    		// CSharpCode.g:23:9: 'using'
    		{
    		DebugLocation(23, 9);
    		Match("using"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__23", 12);
    		LeaveRule("T__23", 12);
    		LeaveRule_T__23();
        }
    }
    // $ANTLR end "T__23"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__24() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__24() {}

    // $ANTLR start "T__24"
    [GrammarRule("T__24")]
    private void mT__24()
    {
    	EnterRule_T__24();
    	EnterRule("T__24", 13);
    	TraceIn("T__24", 13);
    		try
    		{
    		int _type = T__24;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:24:7: ( '{' )
    		DebugEnterAlt(1);
    		// CSharpCode.g:24:9: '{'
    		{
    		DebugLocation(24, 9);
    		Match('{'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__24", 13);
    		LeaveRule("T__24", 13);
    		LeaveRule_T__24();
        }
    }
    // $ANTLR end "T__24"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__25() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__25() {}

    // $ANTLR start "T__25"
    [GrammarRule("T__25")]
    private void mT__25()
    {
    	EnterRule_T__25();
    	EnterRule("T__25", 14);
    	TraceIn("T__25", 14);
    		try
    		{
    		int _type = T__25;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:25:7: ( '}' )
    		DebugEnterAlt(1);
    		// CSharpCode.g:25:9: '}'
    		{
    		DebugLocation(25, 9);
    		Match('}'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__25", 14);
    		LeaveRule("T__25", 14);
    		LeaveRule_T__25();
        }
    }
    // $ANTLR end "T__25"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SPACE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SPACE() {}

    // $ANTLR start "SPACE"
    [GrammarRule("SPACE")]
    private void mSPACE()
    {
    	EnterRule_SPACE();
    	EnterRule("SPACE", 15);
    	TraceIn("SPACE", 15);
    		try
    		{
    		int _type = SPACE;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:22:3: ( ( ' ' | '\\t' )+ )
    		DebugEnterAlt(1);
    		// CSharpCode.g:22:3: ( ' ' | '\\t' )+
    		{
    		DebugLocation(22, 3);
    		// CSharpCode.g:22:3: ( ' ' | '\\t' )+
    		int cnt1=0;
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_1 = input.LA(1);

    			if ((LA1_1=='\t'||LA1_1==' '))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch (alt1)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// CSharpCode.g:
    				{
    				DebugLocation(22, 3);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt1 >= 1)
    					goto loop1;

    				EarlyExitException eee1 = new EarlyExitException( 1, input );
    				DebugRecognitionException(eee1);
    				throw eee1;
    			}
    			cnt1++;
    		}
    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SPACE", 15);
    		LeaveRule("SPACE", 15);
    		LeaveRule_SPACE();
        }
    }
    // $ANTLR end "SPACE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COMMENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COMMENT() {}

    // $ANTLR start "COMMENT"
    [GrammarRule("COMMENT")]
    private void mCOMMENT()
    {
    	EnterRule_COMMENT();
    	EnterRule("COMMENT", 16);
    	TraceIn("COMMENT", 16);
    		try
    		{
    		int _type = COMMENT;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:26:3: ( ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' ) | ( '/*' ( options {greedy=false; } : . )* '*/' ) )
    		int alt5=2;
    		try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    		int LA5_1 = input.LA(1);

    		if ((LA5_1=='/'))
    		{
    			int LA5_2 = input.LA(2);

    			if ((LA5_2=='/'))
    			{
    				alt5 = 1;
    			}
    			else if ((LA5_2=='*'))
    			{
    				alt5 = 2;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 5, 1, input, 2);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(5); }
    		switch (alt5)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// CSharpCode.g:26:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
    			{
    			DebugLocation(26, 5);
    			// CSharpCode.g:26:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
    			DebugEnterAlt(1);
    			// CSharpCode.g:26:6: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    			{
    			DebugLocation(26, 6);
    			Match("//"); 

    			DebugLocation(26, 11);
    			// CSharpCode.g:26:11: (~ ( '\\n' | '\\r' ) )*
    			try { DebugEnterSubRule(2);
    			while (true)
    			{
    				int alt2=2;
    				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    				int LA2_1 = input.LA(1);

    				if (((LA2_1>='\u0000' && LA2_1<='\t')||(LA2_1>='\u000B' && LA2_1<='\f')||(LA2_1>='\u000E' && LA2_1<='\uFFFF')))
    				{
    					alt2 = 1;
    				}


    				} finally { DebugExitDecision(2); }
    				switch ( alt2 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// CSharpCode.g:
    					{
    					DebugLocation(26, 11);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop2;
    				}
    			}

    			loop2:
    				;

    			} finally { DebugExitSubRule(2); }

    			DebugLocation(26, 25);
    			// CSharpCode.g:26:25: ( '\\r' )?
    			int alt3=2;
    			try { DebugEnterSubRule(3);
    			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    			int LA3_1 = input.LA(1);

    			if ((LA3_1=='\r'))
    			{
    				alt3 = 1;
    			}
    			} finally { DebugExitDecision(3); }
    			switch (alt3)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// CSharpCode.g:26:25: '\\r'
    				{
    				DebugLocation(26, 25);
    				Match('\r'); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(3); }

    			DebugLocation(26, 31);
    			Match('\n'); 

    			}

    			DebugLocation(26, 37);
    			Skip();

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// CSharpCode.g:27:5: ( '/*' ( options {greedy=false; } : . )* '*/' )
    			{
    			DebugLocation(27, 5);
    			// CSharpCode.g:27:5: ( '/*' ( options {greedy=false; } : . )* '*/' )
    			DebugEnterAlt(1);
    			// CSharpCode.g:27:6: '/*' ( options {greedy=false; } : . )* '*/'
    			{
    			DebugLocation(27, 6);
    			Match("/*"); 

    			DebugLocation(27, 11);
    			// CSharpCode.g:27:11: ( options {greedy=false; } : . )*
    			try { DebugEnterSubRule(4);
    			while (true)
    			{
    				int alt4=2;
    				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    				int LA4_1 = input.LA(1);

    				if ((LA4_1=='*'))
    				{
    					int LA4_2 = input.LA(2);

    					if ((LA4_2=='/'))
    					{
    						alt4 = 2;
    					}
    					else if (((LA4_2>='\u0000' && LA4_2<='.')||(LA4_2>='0' && LA4_2<='\uFFFF')))
    					{
    						alt4 = 1;
    					}


    				}
    				else if (((LA4_1>='\u0000' && LA4_1<=')')||(LA4_1>='+' && LA4_1<='\uFFFF')))
    				{
    					alt4 = 1;
    				}


    				} finally { DebugExitDecision(4); }
    				switch ( alt4 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// CSharpCode.g:27:39: .
    					{
    					DebugLocation(27, 39);
    					MatchAny(); 

    					}
    					break;

    				default:
    					goto loop4;
    				}
    			}

    			loop4:
    				;

    			} finally { DebugExitSubRule(4); }

    			DebugLocation(27, 44);
    			Match("*/"); 


    			}

    			DebugLocation(27, 50);
    			Skip();

    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COMMENT", 16);
    		LeaveRule("COMMENT", 16);
    		LeaveRule_COMMENT();
        }
    }
    // $ANTLR end "COMMENT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_HEX_DIGIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_HEX_DIGIT() {}

    // $ANTLR start "HEX_DIGIT"
    [GrammarRule("HEX_DIGIT")]
    private void mHEX_DIGIT()
    {
    	EnterRule_HEX_DIGIT();
    	EnterRule("HEX_DIGIT", 17);
    	TraceIn("HEX_DIGIT", 17);
    		try
    		{
    		// CSharpCode.g:32:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    		DebugEnterAlt(1);
    		// CSharpCode.g:
    		{
    		DebugLocation(32, 11);
    		if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("HEX_DIGIT", 17);
    		LeaveRule("HEX_DIGIT", 17);
    		LeaveRule_HEX_DIGIT();
        }
    }
    // $ANTLR end "HEX_DIGIT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_UNICODE_ESC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_UNICODE_ESC() {}

    // $ANTLR start "UNICODE_ESC"
    [GrammarRule("UNICODE_ESC")]
    private void mUNICODE_ESC()
    {
    	EnterRule_UNICODE_ESC();
    	EnterRule("UNICODE_ESC", 18);
    	TraceIn("UNICODE_ESC", 18);
    		try
    		{
    		// CSharpCode.g:36:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
    		DebugEnterAlt(1);
    		// CSharpCode.g:36:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    		{
    		DebugLocation(36, 9);
    		Match('\\'); 
    		DebugLocation(36, 14);
    		Match('u'); 
    		DebugLocation(36, 18);
    		mHEX_DIGIT(); 
    		DebugLocation(36, 28);
    		mHEX_DIGIT(); 
    		DebugLocation(36, 38);
    		mHEX_DIGIT(); 
    		DebugLocation(36, 48);
    		mHEX_DIGIT(); 

    		}

    	}
    	finally
    	{
    		TraceOut("UNICODE_ESC", 18);
    		LeaveRule("UNICODE_ESC", 18);
    		LeaveRule_UNICODE_ESC();
        }
    }
    // $ANTLR end "UNICODE_ESC"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ESC_SEQ() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ESC_SEQ() {}

    // $ANTLR start "ESC_SEQ"
    [GrammarRule("ESC_SEQ")]
    private void mESC_SEQ()
    {
    	EnterRule_ESC_SEQ();
    	EnterRule("ESC_SEQ", 19);
    	TraceIn("ESC_SEQ", 19);
    		try
    		{
    		// CSharpCode.g:41:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC )
    		int alt6=2;
    		try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    		int LA6_1 = input.LA(1);

    		if ((LA6_1=='\\'))
    		{
    			int LA6_2 = input.LA(2);

    			if ((LA6_2=='\"'||LA6_2=='\''||LA6_2=='\\'||LA6_2=='b'||LA6_2=='f'||LA6_2=='n'||LA6_2=='r'||LA6_2=='t'))
    			{
    				alt6 = 1;
    			}
    			else if ((LA6_2=='u'))
    			{
    				alt6 = 2;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 6, 1, input, 2);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(6); }
    		switch (alt6)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// CSharpCode.g:41:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    			{
    			DebugLocation(41, 9);
    			Match('\\'); 
    			DebugLocation(41, 14);
    			input.Consume();


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// CSharpCode.g:42:9: UNICODE_ESC
    			{
    			DebugLocation(42, 9);
    			mUNICODE_ESC(); 

    			}
    			break;

    		}
    	}
    	finally
    	{
    		TraceOut("ESC_SEQ", 19);
    		LeaveRule("ESC_SEQ", 19);
    		LeaveRule_ESC_SEQ();
        }
    }
    // $ANTLR end "ESC_SEQ"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_STRING() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_STRING() {}

    // $ANTLR start "STRING"
    [GrammarRule("STRING")]
    private void mSTRING()
    {
    	EnterRule_STRING();
    	EnterRule("STRING", 20);
    	TraceIn("STRING", 20);
    		try
    		{
    		int _type = STRING;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:45:5: ( ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' ) | '\\'' ( ESC_SEQ |~ ( '\\\\' | '\\'' ) )* '\\'' )
    		int alt9=2;
    		try { DebugEnterDecision(9, decisionCanBacktrack[9]);
    		int LA9_1 = input.LA(1);

    		if ((LA9_1=='\"'))
    		{
    			alt9 = 1;
    		}
    		else if ((LA9_1=='\''))
    		{
    			alt9 = 2;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(9); }
    		switch (alt9)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// CSharpCode.g:45:8: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
    			{
    			DebugLocation(45, 8);
    			// CSharpCode.g:45:8: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
    			DebugEnterAlt(1);
    			// CSharpCode.g:45:9: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
    			{
    			DebugLocation(45, 9);
    			Match('\"'); 
    			DebugLocation(45, 13);
    			// CSharpCode.g:45:13: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
    			try { DebugEnterSubRule(7);
    			while (true)
    			{
    				int alt7=3;
    				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    				int LA7_1 = input.LA(1);

    				if ((LA7_1=='\\'))
    				{
    					alt7 = 1;
    				}
    				else if (((LA7_1>='\u0000' && LA7_1<='!')||(LA7_1>='#' && LA7_1<='[')||(LA7_1>=']' && LA7_1<='\uFFFF')))
    				{
    					alt7 = 2;
    				}


    				} finally { DebugExitDecision(7); }
    				switch ( alt7 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// CSharpCode.g:45:14: ESC_SEQ
    					{
    					DebugLocation(45, 14);
    					mESC_SEQ(); 

    					}
    					break;
    				case 2:
    					DebugEnterAlt(2);
    					// CSharpCode.g:45:24: ~ ( '\\\\' | '\"' )
    					{
    					DebugLocation(45, 24);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop7;
    				}
    			}

    			loop7:
    				;

    			} finally { DebugExitSubRule(7); }

    			DebugLocation(45, 38);
    			Match('\"'); 

    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// CSharpCode.g:45:45: '\\'' ( ESC_SEQ |~ ( '\\\\' | '\\'' ) )* '\\''
    			{
    			DebugLocation(45, 45);
    			Match('\''); 
    			DebugLocation(45, 50);
    			// CSharpCode.g:45:50: ( ESC_SEQ |~ ( '\\\\' | '\\'' ) )*
    			try { DebugEnterSubRule(8);
    			while (true)
    			{
    				int alt8=3;
    				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    				int LA8_1 = input.LA(1);

    				if ((LA8_1=='\\'))
    				{
    					alt8 = 1;
    				}
    				else if (((LA8_1>='\u0000' && LA8_1<='&')||(LA8_1>='(' && LA8_1<='[')||(LA8_1>=']' && LA8_1<='\uFFFF')))
    				{
    					alt8 = 2;
    				}


    				} finally { DebugExitDecision(8); }
    				switch ( alt8 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// CSharpCode.g:45:51: ESC_SEQ
    					{
    					DebugLocation(45, 51);
    					mESC_SEQ(); 

    					}
    					break;
    				case 2:
    					DebugEnterAlt(2);
    					// CSharpCode.g:45:61: ~ ( '\\\\' | '\\'' )
    					{
    					DebugLocation(45, 61);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop8;
    				}
    			}

    			loop8:
    				;

    			} finally { DebugExitSubRule(8); }

    			DebugLocation(45, 76);
    			Match('\''); 

    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("STRING", 20);
    		LeaveRule("STRING", 20);
    		LeaveRule_STRING();
        }
    }
    // $ANTLR end "STRING"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_NAME() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_NAME() {}

    // $ANTLR start "NAME"
    [GrammarRule("NAME")]
    private void mNAME()
    {
    	EnterRule_NAME();
    	EnterRule("NAME", 21);
    	TraceIn("NAME", 21);
    		try
    		{
    		int _type = NAME;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:49:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    		DebugEnterAlt(1);
    		// CSharpCode.g:49:6: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    		{
    		DebugLocation(49, 6);
    		if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(49, 29);
    		// CSharpCode.g:49:29: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    		try { DebugEnterSubRule(10);
    		while (true)
    		{
    			int alt10=2;
    			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
    			int LA10_1 = input.LA(1);

    			if (((LA10_1>='0' && LA10_1<='9')||(LA10_1>='A' && LA10_1<='Z')||LA10_1=='_'||(LA10_1>='a' && LA10_1<='z')))
    			{
    				alt10 = 1;
    			}


    			} finally { DebugExitDecision(10); }
    			switch ( alt10 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// CSharpCode.g:
    				{
    				DebugLocation(49, 29);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop10;
    			}
    		}

    		loop10:
    			;

    		} finally { DebugExitSubRule(10); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("NAME", 21);
    		LeaveRule("NAME", 21);
    		LeaveRule_NAME();
        }
    }
    // $ANTLR end "NAME"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DEFAULT_VALUE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DEFAULT_VALUE() {}

    // $ANTLR start "DEFAULT_VALUE"
    [GrammarRule("DEFAULT_VALUE")]
    private void mDEFAULT_VALUE()
    {
    	EnterRule_DEFAULT_VALUE();
    	EnterRule("DEFAULT_VALUE", 22);
    	TraceIn("DEFAULT_VALUE", 22);
    		try
    		{
    		int _type = DEFAULT_VALUE;
    		int _channel = DefaultTokenChannel;
    		// CSharpCode.g:99:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '@' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '@' )* )
    		DebugEnterAlt(1);
    		// CSharpCode.g:99:8: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '@' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '@' )*
    		{
    		DebugLocation(99, 8);
    		if ((input.LA(1)>='@' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(99, 36);
    		// CSharpCode.g:99:36: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '@' )*
    		try { DebugEnterSubRule(11);
    		while (true)
    		{
    			int alt11=2;
    			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
    			int LA11_1 = input.LA(1);

    			if (((LA11_1>='0' && LA11_1<='9')||(LA11_1>='@' && LA11_1<='Z')||LA11_1=='_'||(LA11_1>='a' && LA11_1<='z')))
    			{
    				alt11 = 1;
    			}


    			} finally { DebugExitDecision(11); }
    			switch ( alt11 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// CSharpCode.g:
    				{
    				DebugLocation(99, 36);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop11;
    			}
    		}

    		loop11:
    			;

    		} finally { DebugExitSubRule(11); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("DEFAULT_VALUE", 22);
    		LeaveRule("DEFAULT_VALUE", 22);
    		LeaveRule_DEFAULT_VALUE();
        }
    }
    // $ANTLR end "DEFAULT_VALUE"

    public override void mTokens()
    {
    	// CSharpCode.g:1:8: ( T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | SPACE | COMMENT | STRING | NAME | DEFAULT_VALUE )
    	int alt12=19;
    	try { DebugEnterDecision(12, decisionCanBacktrack[12]);
    	try
    	{
    		alt12 = dfa12.Predict(input);
    	}
    	catch (NoViableAltException nvae)
    	{
    		DebugRecognitionException(nvae);
    		throw;
    	}
    	} finally { DebugExitDecision(12); }
    	switch (alt12)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// CSharpCode.g:1:10: T__12
    		{
    		DebugLocation(1, 10);
    		mT__12(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// CSharpCode.g:1:16: T__13
    		{
    		DebugLocation(1, 16);
    		mT__13(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// CSharpCode.g:1:22: T__14
    		{
    		DebugLocation(1, 22);
    		mT__14(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// CSharpCode.g:1:28: T__15
    		{
    		DebugLocation(1, 28);
    		mT__15(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// CSharpCode.g:1:34: T__16
    		{
    		DebugLocation(1, 34);
    		mT__16(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// CSharpCode.g:1:40: T__17
    		{
    		DebugLocation(1, 40);
    		mT__17(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// CSharpCode.g:1:46: T__18
    		{
    		DebugLocation(1, 46);
    		mT__18(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// CSharpCode.g:1:52: T__19
    		{
    		DebugLocation(1, 52);
    		mT__19(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// CSharpCode.g:1:58: T__20
    		{
    		DebugLocation(1, 58);
    		mT__20(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// CSharpCode.g:1:64: T__21
    		{
    		DebugLocation(1, 64);
    		mT__21(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// CSharpCode.g:1:70: T__22
    		{
    		DebugLocation(1, 70);
    		mT__22(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// CSharpCode.g:1:76: T__23
    		{
    		DebugLocation(1, 76);
    		mT__23(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// CSharpCode.g:1:82: T__24
    		{
    		DebugLocation(1, 82);
    		mT__24(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// CSharpCode.g:1:88: T__25
    		{
    		DebugLocation(1, 88);
    		mT__25(); 

    		}
    		break;
    	case 15:
    		DebugEnterAlt(15);
    		// CSharpCode.g:1:94: SPACE
    		{
    		DebugLocation(1, 94);
    		mSPACE(); 

    		}
    		break;
    	case 16:
    		DebugEnterAlt(16);
    		// CSharpCode.g:1:100: COMMENT
    		{
    		DebugLocation(1, 100);
    		mCOMMENT(); 

    		}
    		break;
    	case 17:
    		DebugEnterAlt(17);
    		// CSharpCode.g:1:108: STRING
    		{
    		DebugLocation(1, 108);
    		mSTRING(); 

    		}
    		break;
    	case 18:
    		DebugEnterAlt(18);
    		// CSharpCode.g:1:115: NAME
    		{
    		DebugLocation(1, 115);
    		mNAME(); 

    		}
    		break;
    	case 19:
    		DebugEnterAlt(19);
    		// CSharpCode.g:1:120: DEFAULT_VALUE
    		{
    		DebugLocation(1, 120);
    		mDEFAULT_VALUE(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA12 dfa12;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa12 = new DFA12(this);
	}

	private class DFA12 : DFA
	{
		private const string DFA12_eotS =
			"\x8\xFFFF\x3\x14\x5\xFFFF\x1\x14\x1\xFFFF\x2\x14\x1\xFFFF\xD\x14\x1\x27"+
			"\x3\x14\x1\x2B\x1\xFFFF\x2\x14\x1\x2E\x1\xFFFF\x1\x2F\x1\x14\x2\xFFFF"+
			"\x1\x14\x1\x32\x1\xFFFF";
		private const string DFA12_eofS =
			"\x33\xFFFF";
		private const string DFA12_minS =
			"\x1\x9\x7\xFFFF\x3\x30\x5\xFFFF\x1\x30\x1\xFFFF\x2\x30\x1\xFFFF\x12\x30"+
			"\x1\xFFFF\x3\x30\x1\xFFFF\x2\x30\x2\xFFFF\x2\x30\x1\xFFFF";
		private const string DFA12_maxS =
			"\x1\x7D\x7\xFFFF\x3\x7A\x5\xFFFF\x1\x7A\x1\xFFFF\x2\x7A\x1\xFFFF\x12"+
			"\x7A\x1\xFFFF\x3\x7A\x1\xFFFF\x2\x7A\x2\xFFFF\x2\x7A\x1\xFFFF";
		private const string DFA12_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x3\xFFFF\x1\xD\x1"+
			"\xE\x1\xF\x1\x10\x1\x11\x1\xFFFF\x1\x13\x2\xFFFF\x1\x12\x12\xFFFF\x1"+
			"\x8\x3\xFFFF\x1\xC\x2\xFFFF\x1\xB\x1\x9\x2\xFFFF\x1\xA";
		private const string DFA12_specialS =
			"\x33\xFFFF}>";
		private static readonly string[] DFA12_transitionS =
			{
				"\x1\xD\x16\xFFFF\x1\xD\x1\xFFFF\x1\xF\x4\xFFFF\x1\xF\x1\x1\x1\x2\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x4\x1\xE\xA\xFFFF\x1\x5\x1\x6\x1\xFFFF\x1\x7"+
				"\x2\xFFFF\x1\x11\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x2\x10\x1\x8\xC\x10"+
				"\x1\x9\x4\x10\x1\xA\x5\x10\x1\xB\x1\xFFFF\x1\xC",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\xB\x13\x1"+
				"\x12\xE\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x11\x13\x1"+
				"\x15\x2\x13\x1\x16\x5\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x12\x13\x1"+
				"\x17\x7\x13",
				"",
				"",
				"",
				"",
				"",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x1A\x13",
				"",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x1\x18\x19"+
				"\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x1A\x13",
				"",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x8\x13\x1"+
				"\x19\x5\x13\x1\x1A\xB\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x1\x13\x1"+
				"\x1B\x18\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x8\x13\x1"+
				"\x1C\x11\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x12\x13\x1"+
				"\x1D\x7\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x15\x13\x1"+
				"\x1E\x4\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x13\x13\x1"+
				"\x1F\x6\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\xB\x13\x1"+
				"\x20\xE\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\xD\x13\x1"+
				"\x21\xC\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x12\x13\x1"+
				"\x22\x7\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x1\x23\x19"+
				"\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x4\x13\x1"+
				"\x24\x15\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x8\x13\x1"+
				"\x25\x11\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x6\x13\x1"+
				"\x26\x13\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x1A\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x13\x13\x1"+
				"\x28\x6\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x2\x13\x1"+
				"\x29\x17\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x2\x13\x1"+
				"\x2A\x17\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x1A\x13",
				"",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x4\x13\x1"+
				"\x2C\x15\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x13\x13\x1"+
				"\x2D\x6\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x1A\x13",
				"",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x1A\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x4\x13\x1"+
				"\x30\x15\x13",
				"",
				"",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x3\x13\x1"+
				"\x31\x16\x13",
				"\xA\x13\x6\xFFFF\x1\x11\x1A\x13\x4\xFFFF\x1\x13\x1\xFFFF\x1A\x13",
				""
			};

		private static readonly short[] DFA12_eot = DFA.UnpackEncodedString(DFA12_eotS);
		private static readonly short[] DFA12_eof = DFA.UnpackEncodedString(DFA12_eofS);
		private static readonly char[] DFA12_min = DFA.UnpackEncodedStringToUnsignedChars(DFA12_minS);
		private static readonly char[] DFA12_max = DFA.UnpackEncodedStringToUnsignedChars(DFA12_maxS);
		private static readonly short[] DFA12_accept = DFA.UnpackEncodedString(DFA12_acceptS);
		private static readonly short[] DFA12_special = DFA.UnpackEncodedString(DFA12_specialS);
		private static readonly short[][] DFA12_transition;

		static DFA12()
		{
			int numStates = DFA12_transitionS.Length;
			DFA12_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA12_transition[i] = DFA.UnpackEncodedString(DFA12_transitionS[i]);
			}
		}

		public DFA12( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 12;
			this.eot = DFA12_eot;
			this.eof = DFA12_eof;
			this.min = DFA12_min;
			this.max = DFA12_max;
			this.accept = DFA12_accept;
			this.special = DFA12_special;
			this.transition = DFA12_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | SPACE | COMMENT | STRING | NAME | DEFAULT_VALUE );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  Gplusnasite.CSharpParser 
